% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/download.R
\name{load_gaez_data}
\alias{load_gaez_data}
\title{Load GAEZ data into R workspace}
\usage{
load_gaez_data(
  variable = "RES05-YX",
  time_period = "FP4160",
  start_year = NULL,
  end_year = NULL,
  climate_model = NULL,
  ssp = "SSP370",
  crop = "WHEA",
  water_management_level = "HRLM",
  water_supply = "WSR",
  resolution = NA,
  download_dir = NULL,
  overwrite = FALSE,
  validate_inputs = TRUE,
  verbose = TRUE,
  country = NULL,
  mask_to_boundary = TRUE,
  keep_global = TRUE,
  return_metadata = FALSE,
  interactive = TRUE
)
}
\arguments{
\item{variable}{Character - Variable code (e.g., "RES05-YX", "RES02-YLD").
Default is "RES05-YX" (attainable yield).}

\item{time_period}{Character - Time period code (default: "FP4160"). See
\code{?build_gaez_url} for valid options.}

\item{start_year}{Numeric - Start year for time period lookup (optional)}

\item{end_year}{Numeric - End year for time period lookup (optional)}

\item{climate_model}{Character - Climate model (auto-selected if NULL)}

\item{ssp}{Character - SSP scenario (default: "SSP370")}

\item{crop}{Character - Crop name or code (default: "WHEA" for wheat)}

\item{water_management_level}{Character - Water management level (default: "HRLM")}

\item{water_supply}{Character - Water supply code (default: "WSR")}

\item{resolution}{Character - Resolution ("1km", "10km", or NA)}

\item{download_dir}{Character - Custom download directory. If NULL, uses
"Data/GAEZ/" or creates it if it doesn't exist.}

\item{overwrite}{Logical - Whether to overwrite existing files (default: FALSE).
If FALSE and file exists, returns immediately without downloading.}

\item{validate_inputs}{Logical - Whether to validate inputs before download
(default: TRUE). Reserved for future use.}

\item{verbose}{Logical - Whether to show detailed progress messages (default: TRUE)}

\item{country}{Character or SpatVector - Country to crop data to. Can be:
\itemize{
\item NULL (default) - Returns global data
\item Country name (e.g., "Niger")
\item ISO3 code (e.g., "NER")
\item terra SpatVector boundary object
}}

\item{mask_to_boundary}{Logical - If TRUE (default) and country is specified,
masks raster to country boundary (sets values outside boundary to NA).
If FALSE, only crops to country extent (rectangular bounding box).}

\item{keep_global}{Logical - If TRUE (default) and country is specified,
retains the global downloaded file. If FALSE, deletes the global file
after successful cropping to save disk space.}

\item{return_metadata}{Logical - If TRUE, returns a list containing both the
SpatRaster object and the download metadata. If FALSE (default), returns
only the SpatRaster object.}

\item{interactive}{Logical - Whether to prompt for user input when multiple
matches are found (for crops or time periods). Default is TRUE. Set to FALSE
to automatically select the best match without prompting.}
}
\value{
If \code{return_metadata = FALSE} (default), returns a terra SpatRaster
object. If \code{return_metadata = TRUE}, returns a list with two elements:
\itemize{
\item \code{raster}: The terra SpatRaster object
\item \code{metadata}: Download result metadata (file path, URL, size, etc.)
}
}
\description{
A convenient wrapper around \code{download_gaez_dataset()} that downloads
(if needed) and immediately loads GAEZ data into R as a terra SpatRaster
object. Automatically checks if the file is already cached locally to avoid
redundant downloads. Optionally crops data to country-level extents for
regional analysis. This provides a streamlined one-function workflow for
accessing GAEZ data.
}
\details{
The function performs the following workflow:
\enumerate{
\item Calls \code{download_gaez_dataset()} with provided parameters
\item If file exists locally, download is skipped (fast)
\item If file doesn't exist, downloads from FAO Google Cloud Storage
\item Loads the GeoTIFF file using \code{terra::rast()}
\item Returns the raster ready for analysis
}
\subsection{Advantages over separate download + load}{

\itemize{
\item Single function call simplifies workflow
\item Automatic caching - no need to manually check for existing files
\item Error handling combines download and load validation
\item Optional metadata return provides full download information
}
}

\subsection{Country Cropping}{

When \code{country} is specified, the function:
\enumerate{
\item Downloads global data (or uses cached version)
\item Retrieves country boundary via \code{get_country_boundary()}
\item Crops raster to country extent
\item Optionally masks to exact country boundary
\item Saves cropped data with "_\link{ISO3}" suffix
\item Optionally deletes global file if \code{keep_global = FALSE}
}

Cropped files are saved in the same directory as global files with the
country ISO3 code appended (e.g., "GAEZ-V5.RES05-YXX.FP4160.ENSEMBLE.SSP370.MZE.HRLM_NER.tif")
}

\subsection{Memory considerations}{

Large rasters may consume significant memory. For very large datasets or
limited RAM, consider using country cropping to reduce data size, or work
with file paths and load subsets as needed.
}
}
\examples{
\dontrun{
# Basic usage - load global maize yield data
maize <- load_gaez_data(
  crop = "maize",
  time_period = "HP0120",
  climate_model = "AGERA5"
)
terra::plot(maize)

# Load country-level data
niger_maize <- load_gaez_data(
  crop = "maize",
  time_period = "HP0120",
  country = "Niger"
)
terra::plot(niger_maize, main = "Niger Maize Yield")

# Load with ISO3 code and delete global file
niger_wheat <- load_gaez_data(
  crop = "wheat",
  country = "NER",
  keep_global = FALSE
)

# Load with metadata
result <- load_gaez_data(
  crop = "wheat",
  time_period = "FP4160",
  ssp = "SSP370",
  country = "Niger",
  return_metadata = TRUE
)
terra::plot(result$raster)
print(result$metadata$file_path)
print(result$metadata$file_size)

# Compare scenarios for specific country
ssp126 <- load_gaez_data(crop = "sorghum", time_period = "FP4160",
                         ssp = "SSP126", country = "Niger")
ssp370 <- load_gaez_data(crop = "sorghum", time_period = "FP4160",
                         ssp = "SSP370", country = "Niger")

# Calculate differences
diff_370_126 <- ssp370 - ssp126
terra::plot(diff_370_126, main = "Niger: Yield change SSP370 vs SSP126")

# Use custom boundary (e.g., administrative level 1)
library(geodata)
provinces <- gadm(country = "NER", level = 1)
provincial_data <- load_gaez_data(
  crop = "maize",
  country = provinces
)
}

}
\seealso{
\code{\link{download_gaez_dataset}} for download-only functionality,
\code{\link{batch_download_gaez_datasets}} for downloading multiple files,
\code{\link{combine_gaez_batch}} for combining multiple rasters,
\code{\link{get_country_boundary}} for country boundary retrieval
}
