% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/download.R
\name{batch_download_gaez_datasets}
\alias{batch_download_gaez_datasets}
\title{Batch Download GAEZ Datasets}
\usage{
batch_download_gaez_datasets(
  variables = "RES05-YX",
  crops = "WHEA",
  time_periods = NULL,
  ssps = NULL,
  climate_models = NULL,
  water_management_levels = "HRLM",
  parallel = TRUE,
  ...
)
}
\arguments{
\item{variables}{Character vector - Variable codes to download. Default is
"RES05-YX" (attainable yield). Can be a vector like \code{c("RES05-YX", "RES05-SI")}
or a list like \code{list("RES05-YX", "RES05-SI")}.}

\item{crops}{Character vector - Crop names/codes to download. Default is
"WHEA" (wheat). Can be a vector like \code{c("MZE", "WHE")} or a list like
\code{list("MZE", "WHE")}.}

\item{time_periods}{Character vector - Time period codes to download. Default
is NULL (uses single time_period from ...). Can specify multiple periods like
c("HP0120", "FP4160", "FP6180") for time series analysis. Accepts both vectors
and lists.}

\item{ssps}{Character vector - SSP scenarios to download. Default is NULL,
which auto-selects based on time_periods: "HIST" for historical periods
(HP8100, HP0120) or "SSP370" for future periods (FP*). When time_periods
contains both historical and future periods, the function automatically
assigns appropriate SSPs.}

\item{climate_models}{Character vector - Climate models to download. Default
is NULL, which auto-selects: "AGERA5" for historical periods or "ENSEMBLE"
for future periods.}

\item{water_management_levels}{Character vector - Water management levels to
download. Default is "HRLM". Options: "HILM", "HRLM", "LILM", "LRLM".}

\item{parallel}{Logical - Whether to use parallel downloads (default: TRUE).
When TRUE, uses \code{curl::multi_download()} for efficient concurrent downloads
with built-in progress tracking. Set to FALSE for sequential downloads
(useful for debugging or when parallel downloads cause issues).}

\item{...}{Other parameters passed to \code{download_gaez_dataset()}, such as
download_dir, overwrite, verbose. Note: time_period, ssp, and climate_model
should NOT be passed via ... when using the vectorized parameters above.}
}
\value{
A named list of download results, one for each combination. Each
element is the result object from \code{download_gaez_dataset()}.
}
\description{
Downloads multiple GAEZ datasets with the same base parameters but different
combinations of crops, variables, time periods, SSP scenarios, or water
management levels. Useful for comparative studies, time series analysis, or
bulk data acquisition.
}
\details{
\subsection{Parameter Combinations}{

The function creates all combinations of the specified parameters and downloads
each sequentially. Progress is reported for each download.
}

\subsection{Time Period and SSP/Climate Model Validation}{

GAEZ v5 has strict requirements for time periods:
\itemize{
\item \strong{Historical periods} (HP8100, HP0120): Must use climate_model
= "AGERA5" and ssp = "HIST"
\item \strong{Future periods} (FP2140, FP4160, FP6180, FP8100): Must use
GCM climate models (ENSEMBLE, GFDL-ESM4, etc.) and future SSPs
(SSP126, SSP370, SSP585)
}

When \code{time_periods} contains multiple periods spanning historical and
future, the function automatically pairs each time period with the appropriate
climate model and SSP scenario, ignoring incompatible combinations.
}

\subsection{Parameter Flexibility}{

All vector parameters (\code{variables}, \code{crops}, \code{time_periods}, etc.)
accept both atomic vectors and lists. The function automatically converts lists to
vectors for processing. This means these are equivalent:
\itemize{
\item \code{crops = c("MZE", "WHE", "SRG")}
\item \code{crops = list("MZE", "WHE", "SRG")}
}
}

\subsection{Parallel Downloads}{

By default, the function uses parallel downloads via \code{curl::multi_download()}
which provides:
\itemize{
\item \strong{Speed}: 3-6x faster for multiple files (depending on network and
HTTP version)
\item \strong{Progress}: Built-in progress bar showing download status
\item \strong{HTTP/2}: Automatic multiplexing when server supports it
\item \strong{Resume}: Ability to resume interrupted downloads
}

Set \code{parallel = FALSE} to use sequential downloads, which can be useful
for debugging or if parallel downloads encounter issues.
}

\subsection{Error Handling}{

The function continues downloading even if some files fail, allowing you to
get as much data as possible. Check the returned list for individual success
status.
}
}
\examples{
\dontrun{
# Download attainable yield for multiple crops in historical period
results <- batch_download_gaez_datasets(
  variables = "RES05-YX",  # Attainable yield
  crops = c("maize", "wheat", "sorghum"),
  time_periods = "HP0120"  # Auto-selects AGERA5 and HIST
)

# Download same crop under different future scenarios
results <- batch_download_gaez_datasets(
  variables = "RES05-YX",  # Attainable yield
  crops = "maize",
  time_periods = "FP4160",
  ssps = c("SSP126", "SSP370", "SSP585")  # Auto-selects ENSEMBLE
)

# Time series: Download maize yield across multiple time periods
# Function automatically uses HIST+AGERA5 for HP0120 and SSP370+ENSEMBLE for future
results <- batch_download_gaez_datasets(
  variables = "RES05-YX",  # Attainable yield
  crops = "maize",
  time_periods = c("HP0120", "FP4160", "FP6180")  # 2001-2020, 2041-2060, 2061-2080
)

# Compare rain-fed vs irrigated for rice across time
results <- batch_download_gaez_datasets(
  variables = "RES05-YX",  # Attainable yield
  crops = "rice",
  time_periods = c("HP0120", "FP4160"),
  water_management_levels = c("HRLM", "HILM")  # Rain-fed vs Irrigated
)

# Download multiple variables for same crop
results <- batch_download_gaez_datasets(
  variables = c("RES05-YX", "RES05-SI"),  # Yield and suitability
  crops = "wheat",
  time_periods = "FP4160",
  ssps = "SSP370",
  climate_models = "ENSEMBLE"
)

# Use sequential downloads for debugging
results <- batch_download_gaez_datasets(
  variables = "RES05-YX",
  crops = c("maize", "wheat"),
  time_periods = "HP0120",
  parallel = FALSE  # Disable parallel downloads
)

# Check success rate
success_count <- sum(sapply(results, function(x) x$success))
print(paste(success_count, "out of", length(results), "downloads succeeded"))
}

}
\seealso{
\code{\link{download_gaez_dataset}}
}
