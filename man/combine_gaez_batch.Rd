% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/file_management.R
\name{combine_gaez_batch}
\alias{combine_gaez_batch}
\title{Combine batch download results into multi-layer dataset}
\usage{
combine_gaez_batch(
  batch_results,
  output_file = NULL,
  format = c("spatraster", "netcdf"),
  layer_names = NULL,
  country = NULL,
  mask_to_boundary = TRUE,
  keep_global = TRUE,
  overwrite = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{batch_results}{List - Output from \code{batch_download_gaez_datasets()},
or a named list where each element contains a \code{file_path} component.}

\item{output_file}{Character - Optional path for NetCDF export. If NULL,
only returns the SpatRaster object without saving. File extension should
be ".nc" for NetCDF format.}

\item{format}{Character - Output format: "spatraster" (default) returns a
terra SpatRaster object, "netcdf" saves to NetCDF and returns the SpatRaster.}

\item{layer_names}{Character vector - Custom layer names. If NULL, names are
automatically generated from the batch result names. Must match the number
of successful downloads.}

\item{country}{Character or SpatVector - Country to crop combined data to.
Can be NULL (default, global), country name, ISO3 code, or SpatVector boundary.}

\item{mask_to_boundary}{Logical - If TRUE (default) and country is specified,
masks raster to country boundary. If FALSE, only crops to extent.}

\item{keep_global}{Logical - If TRUE (default) and country is specified,
retains the global files. If FALSE, deletes global files after cropping.}

\item{overwrite}{Logical - Whether to overwrite existing output file
(default: FALSE)}

\item{verbose}{Logical - Whether to print progress messages (default: TRUE)}
}
\value{
A terra SpatRaster object with multiple layers. Each layer corresponds
to one successfully downloaded file from the batch.
}
\description{
Takes the output from \code{batch_download_gaez_datasets()} and combines all
successfully downloaded rasters into a single multi-layer SpatRaster object.
Optionally exports to NetCDF format for efficient multi-dimensional storage
and supports country-level cropping for regional analysis. This is useful for
comparative analysis, time series, or scenario comparisons.
}
\details{
The function performs the following steps:
\enumerate{
\item Filters batch results to only successful downloads
\item Loads each GeoTIFF file as a raster layer using terra
\item Combines all layers into a single SpatRaster object
\item Assigns meaningful layer names (e.g., "MZE_FP4160_SSP370_ENSEMBLE")
\item Optionally exports to NetCDF format with compression
}
\subsection{NetCDF Export}{

When \code{output_file} is specified or \code{format = "netcdf"}, the function
exports the multi-layer raster to NetCDF format, which provides:
\itemize{
\item Efficient compression for large datasets
\item Self-describing metadata
\item Wide compatibility with GIS and climate tools
\item Support for multi-dimensional arrays
}
}

\subsection{Layer Naming}{

If \code{layer_names = NULL}, layer names are automatically generated from the
batch result names (typically format: "VARIABLE_CROP_TIMEPERIOD_SSP_CLIMATE_WATER").
These names are cleaned to be valid R variable names and NetCDF dimension names.
}
}
\examples{
\dontrun{
# Download multiple crops for comparison
results <- batch_download_gaez_datasets(
  crops = c("maize", "wheat", "sorghum"),
  time_period = "HP0120",
  climate_model = "AGERA5"
)

# Combine into single multi-layer raster
combined <- combine_gaez_batch(results)
print(combined)  # Shows 3 layers

# Access individual layers
terra::plot(combined[[1]])  # Maize
terra::plot(combined[[2]])  # Wheat

# Export to NetCDF
combined <- combine_gaez_batch(
  results,
  output_file = "crop_comparison.nc",
  format = "netcdf"
)

# Time series example
results <- batch_download_gaez_datasets(
  crops = "maize",
  time_periods = c("HP0120", "FP4160", "FP6180")
)
time_series <- combine_gaez_batch(results, output_file = "maize_timeseries.nc")

# Country-level time series
niger_results <- batch_download_gaez_datasets(
  crops = "rice",
  time_periods = c("HP0120", "FP4160", "FP6180")
)
niger_time_series <- combine_gaez_batch(
  niger_results,
  country = "Niger",
  output_file = "niger_rice_timeseries.nc",
  keep_global = FALSE
)
}

}
\seealso{
\code{\link{batch_download_gaez_datasets}}, \code{\link{load_gaez_data}},
\code{\link{get_country_boundary}}
}
